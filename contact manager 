<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Contact Manager</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f4f6f8;
      margin: 0;
      padding: 0;
      color: #333;
    }

    .container {
      max-width: 700px;
      margin: 50px auto;
      background: #fff;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
    }

    h1 {
      text-align: center;
      color: #2c3e50;
    }

    input {
      width: 100%;
      padding: 12px;
      margin: 8px 0;
      border: 1px solid #ccc;
      border-radius: 8px;
      background: #f9f9f9;
      font-size: 16px;
      transition: border 0.3s;
    }

    input:focus {
      border-color: #3498db;
      outline: none;
      background: #fff;
    }

    button {
      padding: 10px 18px;
      margin: 5px;
      border-radius: 6px;
      cursor: pointer;
      border: none;
      font-weight: bold;
      font-size: 15px;
      transition: 0.3s ease;
    }

    .add-btn {
      background-color: #27ae60;
      color: white;
    }

    .add-btn:hover {
      background-color: #219150;
    }

    .edit-btn {
      background-color: #f39c12;
      color: white;
    }

    .edit-btn:hover {
      background-color: #d78c0c;
    }

    .delete-btn {
      background-color: #c0392b;
      color: white;
    }

    .delete-btn:hover {
      background-color: #a93226;
    }

    .close-btn {
      background-color: #2980b9;
      color: white;
    }

    .close-btn:hover {
      background-color: #216a94;
    }

    .contact-card {
      background: #fefefe;
      border: 1px solid #dcdde1;
      padding: 15px;
      border-radius: 12px;
      margin-bottom: 15px;
      box-shadow: 0 5px 10px rgba(0,0,0,0.02);
      cursor: pointer;
      transition: transform 0.2s ease;
    }

    .contact-card:hover {
      transform: scale(1.02);
    }

    .modal {
      display: none;
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.5);
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }

    .modal-content {
      background: white;
      padding: 25px;
      border-radius: 12px;
      width: 90%;
      max-width: 400px;
    }

    .modal-content h2 {
      margin-top: 0;
      color: #2c3e50;
    }
  </style>
</head>
<body>

<div class="container">
  <h1>ðŸ“˜ Contact Manager</h1>
  <input type="text" id="name" placeholder="Full Name" />
  <input type="text" id="phone" placeholder="Phone Number" />
  <input type="email" id="email" placeholder="Email Address" />
  <button class="add-btn" onclick="addContact()">Add Contact</button>

  <div class="contact-list" id="contactList"></div>
</div>

<!-- Modal -->
<div class="modal" id="modal">
  <div class="modal-content">
    <h2>Contact Details</h2>
    <input type="text" id="modalName" readonly />
    <input type="text" id="modalPhone" readonly />
    <input type="email" id="modalEmail" readonly />
    <div style="margin-top: 10px;">
      <button class="edit-btn" onclick="enableEdit()">Edit</button>
      <button class="delete-btn" onclick="deleteContact()">Delete</button>
      <button class="close-btn" onclick="closeModal()">Close</button>
    </div>
  </div>
</div>

<script>
  let contacts = JSON.parse(localStorage.getItem('contacts')) || [];
  let currentIndex = null;
  let isEditing = false;

  function saveContacts() {
    localStorage.setItem('contacts', JSON.stringify(contacts));
  }

  function renderContacts() {
    const list = document.getElementById('contactList');
    list.innerHTML = '';
    contacts.forEach((contact, index) => {
      const div = document.createElement('div');
      div.className = 'contact-card';
      div.innerHTML = `<strong>${contact.name}</strong>`;
      div.onclick = () => showModal(index);
      list.appendChild(div);
    });
  }

  function addContact() {
    const name = document.getElementById('name').value.trim();
    const phone = document.getElementById('phone').value.trim();
    const email = document.getElementById('email').value.trim();

    if (!name || !phone || !email) {
      alert("Please fill all fields.");
      return;
    }

    contacts.push({ name, phone, email });
    saveContacts();
    renderContacts();

    document.getElementById('name').value = '';
    document.getElementById('phone').value = '';
    document.getElementById('email').value = '';
  }

  function showModal(index) {
    currentIndex = index;
    isEditing = false;

    const contact = contacts[index];
    document.getElementById('modalName').value = contact.name;
    document.getElementById('modalPhone').value = contact.phone;
    document.getElementById('modalEmail').value = contact.email;

    document.getElementById('modalName').readOnly = true;
    document.getElementById('modalPhone').readOnly = true;
    document.getElementById('modalEmail').readOnly = true;

    document.getElementById('modal').style.display = 'flex';
  }

  function enableEdit() {
    isEditing = true;
    document.getElementById('modalName').readOnly = false;
    document.getElementById('modalPhone').readOnly = false;
    document.getElementById('modalEmail').readOnly = false;
  }

  function deleteContact() {
    if (confirm("Are you sure you want to delete this contact?")) {
      contacts.splice(currentIndex, 1);
      saveContacts();
      renderContacts();
      closeModal();
    }
  }

  function closeModal() {
    if (isEditing) {
      const name = document.getElementById('modalName').value.trim();
      const phone = document.getElementById('modalPhone').value.trim();
      const email = document.getElementById('modalEmail').value.trim();

      if (!name || !phone || !email) {
        alert("Fields cannot be empty.");
        return;
      }

      contacts[currentIndex] = { name, phone, email };
      saveContacts();
      renderContacts();
    }

    document.getElementById('modal').style.display = 'none';
  }

  renderContacts();
</script>

</body>
</html>