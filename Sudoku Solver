<!DOCTYPE html><html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Sudoku Solver Pro</title>
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(to right, #1f1c2c, #928dab);
      color: #f5f5f5;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 30px 10px;
      min-height: 100vh;
    }h1 {
  margin-bottom: 20px;
  color: #ffffff;
  font-size: 2.2em;
  text-align: center;
}

.grid {
  display: grid;
  grid-template-columns: repeat(9, 45px);
  grid-gap: 3px;
  border: 4px solid #ffffff44;
  border-radius: 10px;
  padding: 5px;
  background-color: #2e2c3a;
}

input[type="number"] {
  width: 45px;
  height: 45px;
  background-color: #3c3a4d;
  color: #ffffff;
  border: none;
  text-align: center;
  font-size: 20px;
  border-radius: 6px;
  transition: background 0.3s, transform 0.2s;
}

input:focus {
  outline: 2px solid #8ec5fc;
  transform: scale(1.05);
}

.grid input:nth-child(3n) {
  border-right: 2px solid #5e5c6a;
}

.grid input:nth-child(n+19):nth-child(-n+27),
.grid input:nth-child(n+46):nth-child(-n+54) {
  border-bottom: 2px solid #5e5c6a;
}

button {
  margin: 10px 5px;
  padding: 10px 20px;
  font-size: 16px;
  font-weight: 500;
  border: none;
  border-radius: 6px;
  background: #6a82fb;
  color: #fff;
  cursor: pointer;
  transition: all 0.3s ease;
}

button:hover {
  background: #8ec5fc;
  color: #1a1a1a;
}

.buttons {
  margin-top: 20px;
}

input[type="file"] {
  color: #fff;
  margin-top: 15px;
  padding: 5px;
  font-size: 14px;
}

  </style>
</head>
<body>
  <h1>üß© Sudoku Solver Pro</h1>
  <div class="grid" id="sudoku-grid"></div>
  <input type="file" id="imageUpload" accept="image/*" />
  <div class="buttons">
    <button onclick="solveAnimated()">Solve Animated</button>
    <button onclick="solveFromImage()">Solve From Image</button>
    <button onclick="generatePuzzle()">Generate Puzzle</button>
    <button onclick="checkSolution()">Check Solution</button>
    <button onclick="exportPDF()">Export to PDF</button>
    <button onclick="clearGrid()">Clear</button>
  </div>  <script src="https://cdn.jsdelivr.net/npm/tesseract.js@4"></script>  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>  <script>
    const gridContainer = document.getElementById('sudoku-grid');

    for (let i = 0; i < 81; i++) {
      const input = document.createElement('input');
      input.setAttribute('type', 'number');
      input.setAttribute('min', '1');
      input.setAttribute('max', '9');
      gridContainer.appendChild(input);
    }

    function getGrid() {
      const inputs = document.querySelectorAll('.grid input');
      const board = [];
      for (let i = 0; i < 9; i++) {
        const row = [];
        for (let j = 0; j < 9; j++) {
          const val = inputs[i * 9 + j].value;
          row.push(val ? parseInt(val) : 0);
        }
        board.push(row);
      }
      return board;
    }

    function setGrid(board) {
      const inputs = document.querySelectorAll('.grid input');
      for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
          inputs[i * 9 + j].value = board[i][j] || '';
        }
      }
    }

    function clearGrid() {
      const inputs = document.querySelectorAll('.grid input');
      inputs.forEach(input => input.value = '');
    }

    function isValid(board, row, col, num) {
      for (let x = 0; x < 9; x++) {
        if (board[row][x] === num || board[x][col] === num) return false;
      }
      const startRow = Math.floor(row / 3) * 3;
      const startCol = Math.floor(col / 3) * 3;
      for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {
          if (board[startRow + i][startCol + j] === num) return false;
        }
      }
      return true;
    }

    async function solveAnimated() {
      const board = getGrid();
      const inputs = document.querySelectorAll('.grid input');
      async function solve() {
        for (let row = 0; row < 9; row++) {
          for (let col = 0; col < 9; col++) {
            if (board[row][col] === 0) {
              for (let num = 1; num <= 9; num++) {
                if (isValid(board, row, col, num)) {
                  board[row][col] = num;
                  inputs[row * 9 + col].value = num;
                  await new Promise(resolve => setTimeout(resolve, 50));
                  if (await solve()) return true;
                  board[row][col] = 0;
                  inputs[row * 9 + col].value = '';
                }
              }
              return false;
            }
          }
        }
        return true;
      }
      await solve();
    }

    async function solveFromImage() {
      const fileInput = document.getElementById('imageUpload');
      const file = fileInput.files[0];
      if (!file) return alert("Please upload an image");

      const image = URL.createObjectURL(file);
      const result = await Tesseract.recognize(image, 'eng', {
        tessedit_char_whitelist: '123456789'
      });

      const digits = result.data.text.replace(/[^0-9]/g, '').split('').map(n => parseInt(n));

      if (digits.length < 81) return alert("Incomplete Sudoku puzzle detected in image");

      const board = [];
      for (let i = 0; i < 9; i++) {
        board.push(digits.slice(i * 9, (i + 1) * 9));
      }

      setGrid(board);
      solveAnimated();
    }

    function generatePuzzle() {
      const board = Array.from({ length: 9 }, () => Array(9).fill(0));
      let count = 20;
      while (count > 0) {
        const row = Math.floor(Math.random() * 9);
        const col = Math.floor(Math.random() * 9);
        const num = Math.floor(Math.random() * 9) + 1;
        if (board[row][col] === 0 && isValid(board, row, col, num)) {
          board[row][col] = num;
          count--;
        }
      }
      setGrid(board);
    }

    function checkSolution() {
      const board = getGrid();
      for (let row = 0; row < 9; row++) {
        for (let col = 0; col < 9; col++) {
          const num = board[row][col];
          if (num < 1 || num > 9) {
            alert("Some cells are empty or invalid! ‚ùå");
            return;
          }
          board[row][col] = 0;
          if (!isValid(board, row, col, num)) {
            alert(`Wrong number at Row ${row + 1}, Column ${col + 1}`);
            board[row][col] = num;
            return;
          }
          board[row][col] = num;
        }
      }
      alert("Sudoku solved correctly! ‚úÖ");
    }

    async function exportPDF() {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();
      doc.setFontSize(12);
      const board = getGrid();

      for (let i = 0; i < 9; i++) {
        for (let j = 0; j < 9; j++) {
          const x = 20 + j * 15;
          const y = 20 + i * 15;
          doc.text(board[i][j] ? board[i][j].toString() : '.', x, y);
        }
      }
      doc.save("Sudoku.pdf");
    }
  </script></body>
</html>